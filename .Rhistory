prop = 0.7,                                     # Proportion dstined for training
strata = especie)                             # Stratified sampling to make sure we get 70% of each species. Just as good practice
illegal_train <- training(illegal_split)                                        # Extract the training set
illegal_test  <-  testing(illegal_split)                                        # Extract the testing set
## BUILD ML PIPELINE -----------------------------------------------------------
# Define the "recipe", made up of the formulation and data transformations
illegal_rec <-
recipe(
# Formula relating the (factor)response to relevant variables used in the hierarchical bayesian model
formula = f_respuesta ~ tiempo + n_fiscalizadores_por_cometido +  agente + especie + region  + oficina + semana + dia + hora,
data = illegal_train) %>%
# Add a step to transfomr "tiempo" and "n_fiscalizadores_por_cometido" to be between 0 and 1
#step_range(min = 0,
#          max = 1,
#         ranges = c("tiempo", "n_fiscalizadores_por_cometido")) #%>%
# Add a step to allow for species to change in the future (e.g. if the prediction is made for a species not included here)
step_novel(especie)
# Define the model specification
rf_model <- rand_forest(trees =250, min_n = 5, mtry = NULL) %>%
set_engine("ranger",importance = "impurity",  # or "permutation" for permutation importance
class.weights = c(Si = 0.9, No = 0.1)) %>%
set_mode("classification")
workflow <-
workflow() %>%
add_model(rf_model) %>%                                                       # Adds the model as defined
add_recipe(illegal_rec)                                                       # Adds the recipe we defined
# Fit the model ----------------------------------------------------------------
rf_fit <- fit(
object = workflow,                                                            # What to fit?
data = illegal_train                                                          # What to fit it to
)
# See model output
rf_fit
# Extracting the fitted model
model_fit <- rf_fit$fit$fit
model_fit
model_fit
model_fit$fit$variable.importance
saveRDS(rf_fit, file = "~/Dropbox/Back up todo/Sernapesca Project/Models and Data/ML/SernapescaApp/rf_fit_model.rds", compress = "xz")
library(tidymodels)
library(shiny)
library(lubridate)
library(ranger)
library(readr)
#setwd("~/Dropbox/Back up todo/Sernapesca Project/Models and Data/ML/SernapescaApp")
rf_fit <- read_rds("rf_fit_model.rds")
setwd("~/Dropbox/Back up todo/Sernapesca Project/Models and Data/ML/SernapescaApp")
#setwd("~/Dropbox/Back up todo/Sernapesca Project/Models and Data/ML/SernapescaApp")
rf_fit <- read_rds("rf_fit_model.rds")
illegal = read.csv("illegal.csv")
species = read.csv("species.csv")
# UI component of the Shiny app
ui <- fluidPage(
titlePanel("App Predicción Infracciones"),
tags$img(src='logos.png', height=200, width=600),
sidebarLayout(
sidebarPanel(
dateInput("input_date", "Fecha a Realizar el Cometido:", Sys.Date(), format = "dd/mm/yyyy"),
selectInput("input_hora", "Hora a Realizar el Cometido:", choices = sort(unique(illegal$hora))),
selectInput("region", "Region:", choices = unique(illegal$region)),
selectInput("oficina", "Oficina:", choices = ""),
selectInput("especie", "Especie:", choices = ""),
selectInput("agente", "Agente:", choices = ""),
sliderInput("tiempo", "Duración del Cometido (horas):", min = 1, max = 14, value = 1),
sliderInput("n_fiscalizadores_por_cometido", "Número Fiscalizadores en el Cometido:", min = 1, max = 7, value = 1),
actionButton("predict", "Predecir")
),
mainPanel(
uiOutput("prediction"),
uiOutput("species_av"),
uiOutput("prediction_category")
)
)
)
# Server component of the Shiny app
server <- function(input, output, session) {
# Update office choices based on selected region
shiny :: observe({
filtered_offices <- illegal %>%
filter(region == input$region) %>%
distinct(oficina) %>%
pull(oficina)
updateSelectInput(session, "oficina", choices = filtered_offices)
})
# Update species choices based on selected office
shiny :: observe({
filtered_species <- illegal %>%
filter(oficina == input$oficina) %>%
distinct(especie) %>%
pull(especie)
updateSelectInput(session, "especie", choices = filtered_species)
})
# Update medida choices based on selected species
shiny :: observe({
filtered_agente <- illegal %>%
filter(especie == input$especie) %>%
distinct(agente) %>%
pull(agente)
updateSelectInput(session, "agente", choices = filtered_agente)
})
# Prediction logic
observeEvent(input$predict, {
showModal(modalDialog(
div(style = "text-align: center",
em(strong("Realizando Predicción ..."))),
footer = NULL,
size = "s",
fade = TRUE
))
# Calculate week number from input date
semana <- week(input$input_date)
dia    <- wday(input$input_date)
hora   <- input$input_hora
new_data <- tibble(
tiempo = input$tiempo,
n_fiscalizadores_por_cometido = input$n_fiscalizadores_por_cometido,
medida = input$medida,
agente = input$agente,
especie = input$especie,
region = input$region,
oficina = input$oficina,
semana = semana,
dia = dia,
hora = hora
)
prediction <- predict(rf_fit, new_data, type="prob")
prediction_percentage <- (prediction[1,2]) * 100
aa = input$especie
avg_prob <- subset(species, species$.pred_No == aa)
avg_prob <- avg_prob$.pred_Si
threshold <- avg_prob / 2 # Set this to your desired threshold
if (prediction_percentage > avg_prob + threshold) {
category <- "good"
} else if (prediction_percentage < avg_prob - threshold) {
category <- "poor"
} else {
category <- "regular"
}
# Inside your server function, after categorizing the prediction
output$prediction_category <- renderUI({
if (category == "good") {
color <- "green"
text <- "Cometido Sobre el Promedio de la Pesquería"
font_size <- "20px"
font_family <- "'Arial', sans-serif"
font_weight <- "bold"
} else if (category == "regular") {
color <- "black"
text <- "Cometido en el Promedio de la Pesquería"
font_size <- "20px"
font_family <- "'Arial', sans-serif"
font_weight <- "bold"
} else {
color <- "red"
text <- "Cometido Bajo el Promedio de la Pesquería"
font_size <- "20px"
font_family <- "'Arial', sans-serif"
font_weight <- "bold"
}
tags$div(style = sprintf("color: %s;font-size: %s", color, font_size), text)
})
# Display prediction
output$prediction <- renderUI({
tagList(
h3("Probabilidad de Encontrar una Infracción en el Cometido:",  style="font-size: 30px;"),
tags$div(
class = "progress",
tags$div(
class = "progress-bar progress-bar-striped active",
role = "progressbar",
style = sprintf("width: %s%%;", prediction_percentage),
sprintf("%s%%", round(prediction_percentage))
)
)
)
})
output$species_av <- renderUI({
tagList(
h3("Promedio", aa, style="color:black;", style="font-size: 18px;"),
tags$div(
class = "progress",
tags$div(
class = "progress-bar progress-bar-striped active",
role = "progressbar",
style = sprintf("width: %s%%;", avg_prob),
sprintf("%s%%", round(avg_prob))
)
)
)
})
removeModal()
})
}
# Run the Shiny app
shinyApp(ui, server)
# Run the Shiny app
shinyApp(ui, server)
# Extracting the fitted model
model_fit <- rf_fit$fit$fit
# Extracting feature importance
importance <- model_fit$fit$variable.importance
# Converting to data frame for ggplot
importance_df <- data.frame(
Variable = names(importance),
Importance = importance
)
# Sorting by importance
importance_df <- importance_df[order(-importance_df$Importance),]
# Loading library
library(ggplot2)
# Creating a Feature Importance Plot
ggplot(importance_df, aes(x = reorder(Variable, Importance), y = Importance)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Feature Importance Plot",
x = "Variable",
y = "Importance") +
theme_minimal()
library(lubridate)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(ordinal)
library(plotly)
library(fastDummies)
library(digest)
library(lubridate)
library(base)
library(xlsx)
library(compare)
library(readxl)
library(writexl)
##Data
Enf_effort    <- read.csv("~/Dropbox/Back up todo/Sernapesca Project/Models and Data/Data/Esfuerzo.csv")   ## This is the enforcement actions
Enf_sanctions <- read.csv("~/Dropbox/Back up todo/Sernapesca Project/Models and Data/Data/Citaciones.csv")## This is the enforcement sanctions
Enf_identifier<- read.csv("~/Dropbox/Back up todo/Sernapesca Project/Models and Data/Data/Fiscalizadores.csv")## This is list of enforcers in each enforcement action
Enf_effort
unique(Enf_effort$nm_lugar)
unique(Enf_effort$Lugar)
#get unique Lugar from Enf_effort for year 2022
unique(Enf_effort$Nm_oficina[Enf_effort$Fc_Inicio > "2022-01-01"])
#get unique Lugar from Enf_effort for year 2022
unique(Enf_effort$Lugar[Enf_effort$Fc_Inicio > "2022-01-01"])
## BUILD ML PIPELINE -----------------------------------------------------------
# Define the "recipe", made up of the formulation and data transformations
illegal_rec <-
recipe(
# Formula relating the (factor)response to relevant variables used in the hierarchical bayesian model
formula = f_respuesta ~ tiempo + n_fiscalizadores_por_cometido +  agente + especie + region  + oficina + semana + dia + hora + medida,
data = illegal_train) %>%
# Add a step to transfomr "tiempo" and "n_fiscalizadores_por_cometido" to be between 0 and 1
#step_range(min = 0,
#          max = 1,
#         ranges = c("tiempo", "n_fiscalizadores_por_cometido")) #%>%
# Add a step to allow for species to change in the future (e.g. if the prediction is made for a species not included here)
step_novel(especie)
pacman::p_load(
janitor,
tidymodels,
tidyverse,
StanHeaders,
ranger,
lubridate
)
setwd("~/Dropbox/Back up todo/Sernapesca Project/Models and Data/ML/SernapescaApp")
raw_data <- read.csv("Binomial_dataset2.csv")      %>% # Modify here to read from correct folder
clean_names()
# Trim observations and build a factor version for classification
raw_data$tiempo = raw_data$tiempo/60
illegal <- raw_data %>%
drop_na() %>%                                                                 # Remove all observations with NA
filter(!agente == "Sin_Actividad") %>%                                        # Remove agente sin actividad
mutate(f_respuesta = as.factor(ifelse(respuesta == 1, "Si", "No")),           # Recode 0 and 1 to a factor
ano = as.factor(ano))                                                  # Recode year as factor
##Get week
AA=parse_date_time(illegal$fecha, orders   = c('dmy HM', 'Ymd','dmY HM' , 'dmY HMS', 'Ymd HMS'))
BB = format(as.POSIXct(AA, format = '%d/%m/%Y %H:%M:%S'),format = '%Y/%m/%d')
illegal$semana<- week(BB)
##Get day of the week
illegal$dia <-wday(BB)
###Extract  time of the day (hour) only from AA
cc= format(as.POSIXct(AA, format = '%d/%m/%Y %H:%M:%S'),format = '%H:%M:%S')
### COnvert cc into three time slots: Manana, Tarde, Noche
dd= ifelse(cc>="06:00:00" & cc<="12:00:00", "Mañana (6:00 - 12:00)", ifelse(cc>="12:00:00" & cc<="18:00:00", "Tarde (12:00-18:00)", "Noche (>18:00)"))
###Convert cc into the nearest hour, for instance if 08:30 convert to 08:00
illegal$hora <- format(as.POSIXct(cc, format = '%H:%M:%S'),format = '%H:00')
#write.csv(illegal, "~/Dropbox/Back up todo/Sernapesca Project/Models and Data/ML/SernapescaApp/illegal.csv")
# Build training (70%) and testing (30%) data sets
set.seed(1)                                                                     # Random seed
illegal_split <- initial_split(data = illegal,
prop = 0.7,                                     # Proportion dstined for training
strata = especie)                             # Stratified sampling to make sure we get 70% of each species. Just as good practice
illegal_train <- training(illegal_split)                                        # Extract the training set
illegal_test  <-  testing(illegal_split)                                        # Extract the testing set
## BUILD ML PIPELINE -----------------------------------------------------------
# Define the "recipe", made up of the formulation and data transformations
illegal_rec <-
recipe(
# Formula relating the (factor)response to relevant variables used in the hierarchical bayesian model
formula = f_respuesta ~ tiempo + n_fiscalizadores_por_cometido +  agente + especie + region  + oficina + semana + dia + hora + medida,
data = illegal_train) %>%
# Add a step to transfomr "tiempo" and "n_fiscalizadores_por_cometido" to be between 0 and 1
#step_range(min = 0,
#          max = 1,
#         ranges = c("tiempo", "n_fiscalizadores_por_cometido")) #%>%
# Add a step to allow for species to change in the future (e.g. if the prediction is made for a species not included here)
step_novel(especie)
# Define the model specification
rf_model <- rand_forest(trees =250, min_n = 5, mtry = NULL) %>%
set_engine("ranger",importance = "impurity",  # or "permutation" for permutation importance
class.weights = c(Si = 0.9, No = 0.1)) %>%
set_mode("classification")
workflow <-
workflow() %>%
add_model(rf_model) %>%                                                       # Adds the model as defined
add_recipe(illegal_rec)                                                       # Adds the recipe we defined
# Fit the model ----------------------------------------------------------------
rf_fit <- fit(
object = workflow,                                                            # What to fit?
data = illegal_train                                                          # What to fit it to
)
# See model output
rf_fit
#saveRDS(rf_fit, file = "~/Dropbox/Back up todo/Sernapesca Project/Models and Data/ML/SernapescaApp/rf_fit_model.rds", compress = "xz")
# Extracting the fitted model
model_fit <- rf_fit$fit$fit
# Extracting feature importance
importance <- model_fit$fit$variable.importance
# Converting to data frame for ggplot
importance_df <- data.frame(
Variable = names(importance),
Importance = importance
)
# Sorting by importance
importance_df <- importance_df[order(-importance_df$Importance),]
# Loading library
library(ggplot2)
# Creating a Feature Importance Plot
ggplot(importance_df, aes(x = reorder(Variable, Importance), y = Importance)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Feature Importance Plot",
x = "Variable",
y = "Importance") +
theme_minimal()
# UI component of the Shiny app
ui <- fluidPage(
titlePanel("App Predicción Infracciones"),
tags$img(src='logos.png', height=200, width=300),
sidebarLayout(
sidebarPanel(
dateInput("input_date", "Fecha a Realizar el Cometido:", Sys.Date(), format = "dd/mm/yyyy"),
selectInput("input_hora", "Hora a Realizar el Cometido:", choices = sort(unique(illegal$hora))),
selectInput("region", "Region:", choices = unique(illegal$region)),
selectInput("oficina", "Oficina:", choices = ""),
selectInput("especie", "Especie:", choices = ""),
selectInput("agente", "Agente:", choices = ""),
sliderInput("tiempo", "Duración del Cometido (horas):", min = 1, max = 14, value = 1),
sliderInput("n_fiscalizadores_por_cometido", "Número Fiscalizadores en el Cometido:", min = 1, max = 7, value = 1),
actionButton("predict", "Predecir")
),
mainPanel(
uiOutput("prediction"),
uiOutput("species_av"),
uiOutput("prediction_category")
)
)
)
# Server component of the Shiny app
server <- function(input, output, session) {
# Update office choices based on selected region
shiny :: observe({
filtered_offices <- illegal %>%
filter(region == input$region) %>%
distinct(oficina) %>%
pull(oficina)
updateSelectInput(session, "oficina", choices = filtered_offices)
})
# Update species choices based on selected office
shiny :: observe({
filtered_species <- illegal %>%
filter(oficina == input$oficina) %>%
distinct(especie) %>%
pull(especie)
updateSelectInput(session, "especie", choices = filtered_species)
})
# Update medida choices based on selected species
shiny :: observe({
filtered_agente <- illegal %>%
filter(especie == input$especie) %>%
distinct(agente) %>%
pull(agente)
updateSelectInput(session, "agente", choices = filtered_agente)
})
# Prediction logic
observeEvent(input$predict, {
showModal(modalDialog(
div(style = "text-align: center",
em(strong("Realizando Predicción ..."))),
footer = NULL,
size = "s",
fade = TRUE
))
# Calculate week number from input date
semana <- week(input$input_date)
dia    <- wday(input$input_date)
hora   <- input$input_hora
new_data <- tibble(
tiempo = input$tiempo,
n_fiscalizadores_por_cometido = input$n_fiscalizadores_por_cometido,
medida = input$medida,
agente = input$agente,
especie = input$especie,
region = input$region,
oficina = input$oficina,
semana = semana,
dia = dia,
hora = hora
)
prediction <- predict(rf_fit, new_data, type="prob")
prediction_percentage <- (prediction[1,2]) * 100
aa = input$especie
avg_prob <- subset(species, species$.pred_No == aa)
avg_prob <- avg_prob$.pred_Si
threshold <- avg_prob / 2 # Set this to your desired threshold
if (prediction_percentage > avg_prob + threshold) {
category <- "good"
} else if (prediction_percentage < avg_prob - threshold) {
category <- "poor"
} else {
category <- "regular"
}
# Inside your server function, after categorizing the prediction
output$prediction_category <- renderUI({
if (category == "good") {
color <- "green"
text <- "Cometido Sobre el Promedio de la Pesquería"
font_size <- "20px"
font_family <- "'Arial', sans-serif"
font_weight <- "bold"
} else if (category == "regular") {
color <- "black"
text <- "Cometido en el Promedio de la Pesquería"
font_size <- "20px"
font_family <- "'Arial', sans-serif"
font_weight <- "bold"
} else {
color <- "red"
text <- "Cometido Bajo el Promedio de la Pesquería"
font_size <- "20px"
font_family <- "'Arial', sans-serif"
font_weight <- "bold"
}
tags$div(style = sprintf("color: %s;font-size: %s", color, font_size), text)
})
# Display prediction
output$prediction <- renderUI({
tagList(
h3("Probabilidad de Encontrar una Infracción en el Cometido:",  style="font-size: 30px;"),
tags$div(
class = "progress",
tags$div(
class = "progress-bar progress-bar-striped active",
role = "progressbar",
style = sprintf("width: %s%%;", prediction_percentage),
sprintf("%s%%", round(prediction_percentage))
)
)
)
})
output$species_av <- renderUI({
tagList(
h3("Promedio", aa, style="color:black;", style="font-size: 18px;"),
tags$div(
class = "progress",
tags$div(
class = "progress-bar progress-bar-striped active",
role = "progressbar",
style = sprintf("width: %s%%;", avg_prob),
sprintf("%s%%", round(avg_prob))
)
)
)
})
removeModal()
})
}
# Run the Shiny app
shinyApp(ui, server)
# Load necessary libraries
library(dplyr)
# Simulating Data
set.seed(123)  # Setting seed for reproducibility
data <- data.frame(
date = seq(as.Date("2023-01-01"), as.Date("2023-12-31"), by="day"),
fishery_landings = runif(365, 5, 25),  # Random fishery landings between 5 and 25 tons
wind_prediction = runif(365, 5, 30)     # Random wind prediction between 5 and 30 knots
)
# Setting Criteria for Red Flags
landing_threshold <- 20  # 20 tons of landings
wind_threshold <- 20     # 20 knots of wind
# Check for red flags
red_flags <- data %>%
filter(fishery_landings > landing_threshold & wind_prediction > wind_threshold)
# If there are any red flags, print a warning
if(nrow(red_flags) > 0) {
cat("Red Flag Detected on dates:", red_flags$date, "\n")
} else {
cat("No Red Flags Detected.\n")
}
wind_prediction
wind_prediction
